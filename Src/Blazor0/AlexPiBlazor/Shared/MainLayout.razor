@using System.Diagnostics;
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>AlexPiBlazor</PageTitle>

<div class="page">
  <div class="sidebar">
    <NavMenu />
  </div>

  <main>
    <div class="top-row px-4">
      @* <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a> *@

      <NavLink class="nav-link" href="counter">
        <span class="oi oi-plus" aria-hidden="true"></span> Contact
      </NavLink>
      <NavLink class="nav-link" href="counter">
        <span class="oi oi-plus" aria-hidden="true"></span> About
      </NavLink>

      <button class="btn btn-primary" @onclick="ToggleTheme">Dark Theme</button>

    </div>

    <article class="content px-4">
      @Body
    </article>
  </main>
</div>

@code {
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if ((bool.TryParse((await JSRuntime.InvokeAsync<object>("localStorage.getItem", "isDarkTheme"))?.ToString() ?? "true", out var storedThemeIsDark)))
      if (storedThemeIsDark && _isDarkTheme == false)
      {
        Trace.WriteLine($"{firstRender,-5} {storedThemeIsDark,-5} => {_isDarkTheme,-5}  CHANGING...");
        await ToggleTheme();
      }
      else
        Trace.WriteLine($"{firstRender,-5} {storedThemeIsDark,-5} => {_isDarkTheme,-5}  staying as is.");
  }

  private bool _isDarkTheme = false; //todo: default to dark theme to prevent flash of light theme!

  private async Task ToggleTheme()
  {
    _isDarkTheme = !_isDarkTheme;
    await JSRuntime.InvokeVoidAsync(_isDarkTheme ? "addCSS" : "removeCSS", "css/darktheme.css");
    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkTheme", _isDarkTheme);
  }
}