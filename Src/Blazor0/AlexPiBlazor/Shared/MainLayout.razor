@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>AlexPiBlazor</PageTitle>

<div class="page">
  <div class="sidebar">
    <NavMenu />
  </div>

  <main>
    <div class="top-row px-4">
      @* <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a> *@

      <NavLink class="nav-link" href="counter">
        <span class="oi oi-plus" aria-hidden="true"></span> Contact
      </NavLink>
      <NavLink class="nav-link" href="counter">
        <span class="oi oi-plus" aria-hidden="true"></span> About
      </NavLink>

      <button class="btn btn-primary" @onclick="ToggleTheme">Dark Theme</button>

    </div>

    <article class="content px-4">
      @Body
    </article>
  </main>
</div>


@code {
  private bool isDarkTheme = false;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if ((bool.TryParse((await JSRuntime.InvokeAsync<object>("localStorage.getItem", "isDarkTheme"))?.ToString() ?? "true", out var storedTheme)) ? storedTheme : true)
      await ToggleTheme();
  }

  private async Task ToggleTheme()
  {
    isDarkTheme = !isDarkTheme;
    await JSRuntime.InvokeVoidAsync(isDarkTheme ? "addCSS" : "removeCSS", "css/darktheme.css");
    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isDarkTheme", isDarkTheme);
  }

  // private bool _isDarkTheme = false;

  // private async Task ToggleTheme()
  // {
  //   _isDarkTheme = !_isDarkTheme;
  //   if (_isDarkTheme)
  //     await JSRuntime.InvokeVoidAsync("addCSS", "css/darktheme.css");
  //   else
  //     await JSRuntime.InvokeVoidAsync("removeCSS", "css/darktheme.css");
  // }
}
